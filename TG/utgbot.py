# Python Modules
from datetime import datetime, timedelta
from asyncio import sleep
import io
import random

import asyncio
import ujson
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext

# For telegram api
from aiogram import Bot as TG_Bot
from aiogram import Dispatcher, executor, types
from aiogram.utils.json import json
from loguru import logger

from TG.Bot import bot_buy
from TG.BotEvents import BotEvents
from TG.Admin import Admin
from TG.Models.BotEvents import BotsEvents_Model, BotEvent_Model
from TG.Models.Addresses import Addresses_Model, Address_Model
from TG.Models.ExceptedDeliveries import ExceptedDeliveries_Model, ExceptedDelivery_Model
from TG.Models.Delivery import Deliveries_Model
from TG.Models.OrdersOfOrders import OrderOfOrders_Model, OrdersOfOrders_Model
from TG.Models.Users import Users_Model, User_Model
from TG.Models.Bots import Bots_Model
from TG.Models.Whitelist import Whitelist_Model
from TG.Models.Admins import Admin_Model as Admin_model
from TG.Markups import get_markup, get_keyboard, get_list_keyboard
from TG.States import States
from WB.Partner import Partner

from configs import config

import pandas as pd

DEBUG = config['DEBUG']

API_TOKEN = config['tokens']['telegram']
# Initialize bot and dispatcher
tg_bot = TG_Bot(token=API_TOKEN)
loop = asyncio.get_event_loop()
dp = Dispatcher(tg_bot, storage=MemoryStorage(), loop=loop)


@dp.message_handler(text='‚óÑ –ù–∞–∑–∞–¥', state="*")
async def back_handler(message: types.Message, state: FSMContext):
    id = str(message.chat.id)
    is_admin = Admin.is_admin(id)
    if is_admin:
        current_state = await state.get_state()
        if current_state == "States:ADMIN" or current_state is None:
            markup = get_markup('main_main', is_admin=is_admin)
        else:
            await States.ADMIN.set()
            markup = get_markup('admin_main', id=id)
            await message.answer('–í—ã –≤ –º–µ–Ω—é –ê–¥–º–∏–Ω–∞', reply_markup=markup)
            return
    else:
        markup = get_markup('main_main', Users_Model.load(id).role)
    await state.set_data({})
    await States.MAIN.set()
    await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup)


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    username = message.chat.username
    id = str(message.chat.id)
    print(username, id, 'is started')
    whitelisted = Whitelist_Model.check(id)
    if whitelisted:
        await States.MAIN.set()
        is_admin = Admin.is_admin(id)
        if is_admin:
            markup = get_markup('main_main', is_admin=is_admin)
        else:
            user = Users_Model.load(id)
            if user:
                markup = get_markup('main_main', user.role)
            else:
                markup = get_markup('main_main')
        await message.reply("–ü—Ä–∏–≤–µ—Ç", reply_markup=markup)
    elif username:
        wl = Whitelist_Model.set_tg_id(id, username=username)
        if wl:
            await States.MAIN.set()
            markup = get_markup('main_main')
            await message.reply("–ü—Ä–∏–≤–µ—Ç", reply_markup=markup)
    else:
        await States.WL_SECRET_KEY.set()


@dp.message_handler(state=States.WL_SECRET_KEY)
async def whitelist_secret_key_handler(message: types.Message):
    secret_key = message.text
    id = str(message.chat.id)
    wl = Whitelist_Model.set_tg_id(id, secret_key=secret_key)
    if wl:
        await States.MAIN.set()
        markup = get_markup('main_main')
        await message.answer("–ü—Ä–∏–≤–µ—Ç", reply_markup=markup)


@dp.message_handler(lambda message: message.text == 'Admin')
async def set_admin(message: types.Message):
    id = str(message.chat.id)
    is_admin = Admin.is_admin(id)
    if is_admin:
        await States.ADMIN.set()
        markup = get_markup('admin_main', is_admin=is_admin, id=id)
        await message.answer(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –õ–æ—Ä–¥ {message.chat.full_name}', reply_markup=markup)


@dp.message_handler(state=States.MAIN)
async def main_handler(message: types.Message):
    msg = message.text.lower()
    id = str(message.chat.id)
    user = Users_Model.load(id)

    logger.info(user)

    if not user:
        if "‚ö° —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚ö°" in msg:
            await States.REGISTER.set()
            markup = get_markup('main_register')
            await message.answer("–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å:", reply_markup=markup)
            return
    elif user.role in "FF":
        if "üöÄ —Å–æ–±—Ä–∞—Ç—å —Å–∞–º–æ–≤—ã–∫—É–ø—ã üöÄ" in msg:
            # deliveries = Deliveries_Model.load(collected=False, inn="771375894400")
            # for delivery in deliveries:
            #     await message.answer(f'–ê—Ä—Ç–∏–∫—É–ª—ã –∑–∞–∫–∞–∑–∞ {delivery.articles}\n\n'
            #                          f'–ê–¥—Ä–µ—Å –∑–∞–∫–∞–∑–∞ {delivery.pup_address}\n\n'
            #                          f'–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞ {delivery.start_date}')
            # await message.answer('‚õî üöÄ –°–±–æ—Ä–∫–∞ —Å–∞–º–æ–≤—ã–∫—É–ø–æ–≤ –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ üöÄ ‚õî')
            users = Users_Model.load(role='IE')
            ies = [user.ie for user in users]
            logger.info(ies)
            await States.COLLECT_ORDERS.set()
            markup = get_list_keyboard(ies)
            logger.info(markup)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ò–ü, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ —Å–æ–±—Ä–∞—Ç—å —Å–∞–º–æ–≤—ã–∫—É–ø—ã', reply_markup=markup)
            return
        elif "‚õî —Å–æ–±—Ä–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—ã üöö" in msg:
            await message.answer('‚õî –°–±–æ—Ä–∫–∞ –†–ï–ê–õ–¨–ù–´–• –∑–∞–∫–∞–∑–æ–≤ –ü–û–ö–ê –ù–ï–î–û–°–¢–£–ü–ù–ê ‚õî')
            # users = Users.load(role='IE')
            # ies = [user.ie for user in users]
            # print(ies)
            # await States.COLLECT_OTHER_ORDERS.set()
            # markup = get_list_keyboard(ies)
            # await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ò–ü, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ —Å–æ–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑—ã', reply_markup=markup)
            return
        elif "üìë —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∏–∑ —Å–±–æ—Ä–∫–∏ –∑–∞–∫–∞–∑–æ–≤ üìë" in msg:
            users = Users_Model.load(role='IE')
            if users:
                ies = [user.ie for user in users]
                print(ies)
                await States.EXCEPTED_ORDERS_LIST.set()
                markup = get_list_keyboard(ies)
                await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ò–ü, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫',
                                     reply_markup=markup)
                return
            else:
                await message.answer('–ù–∏ –æ–¥–Ω–æ –ò–ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
                return
    elif user.role in "PUP":
        if "üìä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä" in msg:
            # deliveries = Deliveries_Model.load_stat(pup_tg_id="791436094")
            deliveries = Deliveries_Model.load_stat(pup_tg_id=id)
            if deliveries:
                msg = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü:</b> üìÖ\n\n"

                total_price_str = str(sum([delivery.total_price for delivery in deliveries]))
                total_price = ''.join(
                    [p + ' ' if (len(total_price_str) - i) % 3 == 1 else p for i, p in enumerate(total_price_str)])
                msg += f"<b>–û–±–æ—Ä–æ—Ç:</b> {total_price}‚ÇΩ\n" \
                       f"<b>–ó–∞–∫–∞–∑—ã:</b> {sum([sum(delivery.quantities) for delivery in deliveries])} üì¶\n"

                addresses_list = list(set(delivery.pup_address for delivery in deliveries))
                cities_list = list(set(delivery.pup_address.split(",")[0] for delivery in deliveries))

                stat = []
                for i, address in enumerate(addresses_list):
                    stat += [{}]
                    stat[i]['cnt'] = 0
                    stat[i]['total_price'] = 0
                    stat[i]['fbo_cnt'] = 0

                    for delivery in deliveries:
                        if delivery.pup_address == address:
                            stat[i]['address'] = address
                            stat[i]['total_price'] += delivery.total_price
                            stat[i]['cnt'] += 1
                            print(delivery.statuses)
                            if "FBO" in delivery.statuses:
                                stat[i]['fbo_cnt'] += sum(1 if status == "FBO" else 0 for status in delivery.statuses)

                stat = sorted(stat, key=lambda o: o['total_price'], reverse=True)

                # msg += "\nüì´ <b>–ù–∞ –∫–∞–∂–¥—ã–π –∞–¥—Ä–µ—Å</b> üì´\n"
                for city in cities_list:
                    msg += f"\nüè¨ <u><b>{city.title()}:</b></u>\n"
                    for s in stat:
                        if city in s['address']:
                            total_price_str = str(s['total_price'])
                            total_price = ''.join([p + ' ' if (len(total_price_str) - i) % 3 == 1 else p for i, p in
                                                   enumerate(total_price_str)])

                            msg += f"\nüì´ <b>{','.join(s['address'].split(',')[1:]).title()}:</b>\n" \
                                   f"<b>–û–±–æ—Ä–æ—Ç:</b> {total_price}‚ÇΩ\n" \
                                   f"<b>–ó–∞–∫–∞–∑—ã:</b> {s['cnt']} üì¶\n"
            else:
                msg = "<b>–ù–∞ –≤–∞—à–∏ –ü–í–ó –µ—â–µ –Ω–µ –±—ã–ª–æ –∑–∞–∫–∞–∑–æ–≤ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ</b>"

            await message.answer(msg, parse_mode="HTML")
            return
        elif "üìì –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–≤–∑ üìì" in msg:
            # deliveries = Deliveries_Model.load_check_state(pup_tg_id="791436094")
            deliveries = Deliveries_Model.load_check_state(pup_tg_id=id)
            if deliveries:
                msg = "üìì <b>–°–æ—Å—Ç–æ—è–Ω–∏—è –ü–í–ó</b> üìì\n\n"

                addresses_list = list(set(delivery.pup_address for delivery in deliveries))
                cities_list = list(set(delivery.pup_address.split(",")[0] for delivery in deliveries))

                is_fbos_cnt = 0

                stat = []
                for i, address in enumerate(addresses_list):
                    stat += [{}]
                    stat[i]['cnt'] = 0
                    stat[i]['fbo_cnt'] = 0
                    stat[i]['articles'] = []
                    for delivery in deliveries:
                        if delivery.pup_address == address:
                            stat[i]['address'] = address
                            stat[i]['cnt'] += 1
                            print("FBO" in delivery.statuses, delivery.statuses)
                            if "FBO" in delivery.statuses:
                                is_fbos_cnt += 1
                                is_fbos = [1 if status == "FBO" else 0 for status in delivery.statuses]
                                stat[i]['fbo_cnt'] += sum(is_fbos)
                                for j, is_fbo in enumerate(is_fbos):
                                    if is_fbo:
                                        in_articles = [delivery.articles[j] in article for article in stat[i]['articles']]
                                        if any(in_articles):
                                            index = in_articles.index(True)
                                            splited = stat[i]['articles'][index].split(' ')
                                            stat[i]['articles'][index] = splited[0] + " " + str(int(splited[1]) + 1)
                                        else:
                                            stat[i]['articles'] += [delivery.articles[j] + " 1"]
                if is_fbos_cnt:
                    stat = sorted(stat, key=lambda o: o['fbo_cnt'], reverse=True)

                    # msg += "\nüì´ <b>–¢–æ–≤–∞—Ä—ã —Ñ–∏–∑–∏—á–µ—Å–∫–∏ –Ω–∞ –ü–í–ó</b> üì´\n"
                    for city in cities_list:
                        _msg = f"\nüè¨ <u><b>{city.title()}:</b></u>\n"

                        is_have_fbo_cnt = False
                        for s in stat:
                            if city in s['address']:
                                if s['fbo_cnt']:
                                    is_have_fbo_cnt = True
                                    _msg += f"\nüì´ <b>{','.join(s['address'].split(',')[1:]).title()}:</b>\n" \
                                            f"<b>–¢–æ–≤–∞—Ä—ã —Ñ–∏–∑–∏—á–µ—Å–∫–∏ –Ω–∞ –ü–í–ó:</b> {s['fbo_cnt']} üì¶\n"
                                    _msg += f"<b>–ê—Ä—Ç–∏–∫—É–ª     –∫–æ–ª-–≤–æ</b>\n"
                                    for article in s['articles']:
                                        _msg += f"{'   '.join(article.split(' '))} —à—Ç.\n"
                        if is_have_fbo_cnt:
                            msg += _msg
                else:
                    msg = "<b>–î–ª—è –≤–∞—à–∏—Ö –ü–í–ó –µ—â–µ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏</b>"
            else:
                msg = "<b>–î–ª—è –≤–∞—à–∏—Ö –ü–í–ó –µ—â–µ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏</b>"

            await message.answer(msg, parse_mode="HTML")
            return
    is_admin = Admin.is_admin(id)
    if is_admin:
        if "üåà admin" in msg:
            await set_admin(message)
            return


@dp.message_handler(state=States.REGISTER)
async def register_handler(message: types.Message):
    msg = message.text.lower()
    id = str(message.chat.id)

    if "–∫–∞–∫ –ø–≤–∑" in msg:
        id = str(message.chat.id)
        user = Users_Model.load(id)
        if not user:
            user = User_Model(id, role='PUP')
            user.insert()

        await States.PUP_ADDRESSES_START.set()
    elif "–∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Ñ—Ñ" in msg:
        id = str(message.chat.id)
        user = Users_Model.load(id)
        if not user:
            user = User_Model(id, role='FF')
            user.insert()

        await States.FF_ADDRESS_START.set()
    elif "–Ω–∞–∑–∞–¥" in msg:
        await States.MAIN.set()
        markup = get_markup('main_main')
        await message.reply("–ü—Ä–∏–≤–µ—Ç", reply_markup=markup)

    await message.answer("–í–∞—à–µ –§–ò–û?")


@dp.message_handler(state=States.ADMIN)
async def admin_handler(message: types.Message):
    id = str(message.chat.id)
    msg = message.text.lower()
    print(msg)

    if "üí∞ —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ üí∞" in msg:
        await States.CREATE_ORDER.set()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞")
    elif "üëÄ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã üëÄ" in msg:
        await States.WATCH_ORDER.set()
        keyboard = get_keyboard('admin_watch_orders_group')
        await message.answer("–í–≤–µ–¥–∏—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞", reply_markup=keyboard)
    elif "‚úèÔ∏è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã ‚úèÔ∏è" in msg:
        await States.EDIT_ORDER.set()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞")
    elif "üîç –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ üîé" in msg:
        keyboard = get_keyboard('admin_bot_search')
        await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ Excel —Ñ–∞–π–ª –∑–∞–∫–∞–∑–∞\n'
                             '–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∏ –≤—ã–∫—É–ø–∏—Ç—å—Å—è 1 —Ç–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –∞—Ä—Ç–∏–∫—É–ª–æ–º', reply_markup=keyboard)
        await States.BOT_SEARCH.set()
    elif "üí∞ –≤—ã–∫—É–ø —Å–æ–±—Ä–∞–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ üí∞" in msg:
        bots_event = BotsEvents_Model.load(event="FOUND")
        if bots_event:
            await message.answer(f'{len(bots_event)} –±–æ—Ç–æ–≤ –æ–∂–∏–¥–∞—é—Ç –≤—ã–∫—É–ø–∞, —Å–∫–æ–ª—å–∫–∏—Ö –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–∫—É–ø–∏—Ç—å?')
            await message.answer('<b>–§–ò–ß–ê</b>: <i>–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É</i> <b>"üí∞ –≤—ã–∫—É–ø —Å–æ–±—Ä–∞–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ üí∞"</b> <i>–¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤—ã–∫—É–ø–∏—Ç—å</i> <b>—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω</b>.', parse_mode="HTML")
            await States.BOT_BUY.set()
        else:
            markup = get_markup('admin_main', id=id)
            await message.answer('----------üéâ–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!üéâ--------\n'
                                 'üí≤–í—ã –≤—ã–∫—É–ø–∏–ª–∏ –≤—Å–µ –∑–∞–∫–∞–∑—ã!üí≤', reply_markup=markup)
    elif "üí∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∫—É–ø üí∏" in msg:
        await States.RE_BUY.set()
        tg_bots = Bots_Model.load_with_balance()
        bots_name = [f"{tg_bots[i].name} {tg_bots[i].balance} ‚ÇΩ" for i in range(len(tg_bots))]
        markup = get_keyboard('admin_bots', bots_name)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞', reply_markup=markup)
    elif "‚ûï –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚ûï" in msg:
        await States.TO_WL.set()
        markup = get_markup('admin_add_user')
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±', reply_markup=markup)
    elif "üíº –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –ø–∞—Ä—Ç–Ω—ë—Ä–∫—É üíº" in msg:
        await States.AUTH_PARTNER.set()
        markup = get_markup('only_back')
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 9XXXXXXX\n'
                             '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–∏–¥—ë—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏', reply_markup=markup)
    elif "üïô –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–∂–∏–¥–∞–µ–º–æ–µ üïë" in msg:
        deliveries = Deliveries_Model.load(active=True, pred_end_date=datetime.now())
        if deliveries:
            await States.CHECK_WAITS.set()
            bots_name = []
            for delivery in deliveries:
                # print(delivery)
                # is_delivery_wait_exist = BotsWait_Model.check_exist_delivery_wait(delivery.bot_name, delivery.id)
                # if not is_delivery_wait_exist:
                #     bot_event = BotWait_Model(bot_name=delivery.bot_name, event='delivery', start_datetime=datetime.now(),
                #                              end_datetime=delivery.pred_end_date, wait=False,
                #                              data=json.dumps('{"id": ' + str(delivery.id) + '}'))
                #     bot_event.insert()
                if delivery.bot_name not in bots_name:
                    bots_name += [delivery.bot_name]
            keyboard = get_keyboard('admin_bots', bots_name)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞', reply_markup=keyboard)
        else:
            await States.ADMIN.set()
            await message.answer('–í—Å–µ —Ç–æ–≤–∞—Ä—ã –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã')
        return
    elif "üíµ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö –±–æ—Ç–æ–≤ üíµ" in msg:
        await States.CHECK_BOTS_BALANCE.set()
        keyboard = get_keyboard('yes_or_no')
        await message.answer('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–ª–∞–Ω—Å–æ–≤ –≤—Å–µ—Ö –±–æ—Ç–æ–≤?', reply_markup=keyboard)
        return
    elif '‚úâ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–¥—Ä–µ—Å–∞ ‚úâ' in msg:
        res_message, state = Admin.check_not_checked_pup_addresses()
        markup = get_markup('admin_main', id=id)
        await message.answer(res_message, reply_markup=markup)
        await getattr(States, state).set()
    elif 'üè° —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å–∞ –ø–æ –±–æ—Ç–∞–º üè°' in msg:
        res_message, state = Admin.check_not_added_pup_addresses()
        markup = get_markup('admin_main', id=id)
        await message.answer(res_message, reply_markup=markup)
        await getattr(States, state).set()
    else:
        if "ü§ñ –æ—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞ ü§ñ" in msg or "ü§ñ —Å—Ç–∞—Ç—É—Å –±–æ—Ç–æ–≤ ü§ñ" in msg:
            if id == '794329884' or id == '535533975':
                if "ü§ñ –æ—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞ ü§ñ" in msg:
                    await States.RUN_BOT.set()
                    bots = Bots_Model.load()
                    bots_name = [f"{bots[i].name}" for i in range(len(bots))]
                    bots_name.sort()
                    # markup = get_keyboard('admin_bots', bots_name)
                    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –±–æ—Ç–∞')
                if "ü§ñ —Å—Ç–∞—Ç—É—Å –±–æ—Ç–æ–≤ ü§ñ":
                    pass
        else:
            await main_handler(message)


@dp.callback_query_handler(state=States.BOT_SEARCH)
async def bot_search_callback_query_handler(call: types.CallbackQuery):
    id = str(call.message.chat.id)
    msg = call.data
    article = msg
    category = ''
    search_key = ''
    inn = ''
    if article in ['90852969']:
        # category = '–ñ–µ–Ω—â–∏–Ω–∞–º;–ü–ª—è–∂–Ω–∞—è –º–æ–¥–∞;–ö—É–ø–∞–ª—å–Ω–∏–∫–∏'
        search_key = '–ö—É–ø–∞–ª—å–Ω–∏–∫ —Å–ª–∏—Ç–Ω—ã–π –∂–µ–Ω—Å–∫–∏–π –±–µ–ª—ã–π'
        inn = '381108544328'
    if article in ['90086484']:
        # category = '–ñ–µ–Ω—â–∏–Ω–∞–º;–ü–ª—è–∂–Ω–∞—è –º–æ–¥–∞;–ö—É–ø–∞–ª—å–Ω–∏–∫–∏'
        search_key = '–ö—É–ø–∞–ª—å–Ω–∏–∫ —Ä–∞–∑–¥–µ–ª—å–Ω—ã–π'
        inn = '381108544328'
    if article in ['90633439']:
        # category = '–ñ–µ–Ω—â–∏–Ω–∞–º;–ü–ª—è–∂–Ω–∞—è –º–æ–¥–∞;–ö—É–ø–∞–ª—å–Ω–∏–∫–∏'
        search_key = '–ñ–µ–Ω—Å–∫–∏–π —Ä–∞–∑–¥–µ–ª—å–Ω—ã–π –∫—É–ø–∞–ª—å–Ω–∏–∫ –±–µ–∑ –ø—É—à –∞–ø'
        inn = '381108544328'
    if article in ['94577084']:
        # category = '–ñ–µ–Ω—â–∏–Ω–∞–º;–ü–ª—è–∂–Ω–∞—è –º–æ–¥–∞;–ö—É–ø–∞–ª—å–Ω–∏–∫–∏'
        search_key = '–®–∫–æ–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å'
        # inn = '381108544328'

    await States.ADMIN.set()

    goods = [[article, search_key, category, "1", "1", inn]]
    await call.message.edit_text(f'–ù–∞—á–∞–ª—Å—è –ø–æ–∏—Å–∫ –∞—Ä—Ç–∏–∫—É–ª–∞ {article}')

    data_for_bots, status_fail = await Admin.get_data_of_goods(goods)
    if status_fail:
        await call.message.answer(f'‚ùå –ü–æ–∏—Å–∫ –∞—Ä—Ç–∏–∫—É–ª–∞ {article} —É–ø–∞–ª –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –∫–∞—Ä—Ç–æ—á–∫–∏ ‚ùå')

    res_msg = ''
    msgs = ''
    if DEBUG:
        msgs = await Admin.bot_search(data_for_bots)
    else:
        try:
            msgs = await Admin.bot_search(data_for_bots)
        except:
            await call.message.answer(f'‚ùå –ü–æ–∏—Å–∫ –∞—Ä—Ç–∏–∫—É–ª–∞ {article} —É–ø–∞–ª ‚ùå')
    try:
        for msg in msgs:
            res_msg += msg + "\n"
    except:
        pass

    res_msg += '\n' + f'–ü–æ–∏—Å–∫ –∞—Ä—Ç–∏–∫—É–ª–∞ {article} –∑–∞–≤–µ—Ä—à–µ–Ω'

    await call.message.answer(res_msg)


@dp.message_handler(state=States.AUTH_PARTNER, content_types=['text'])
async def inside_handler(message: types.Message, state: FSMContext):
    msg = message.text
    id = str(message.chat.id)
    state_data = await state.get_data()

    if state_data.get('number') == None:
        number = str(int(msg))
        state_data['number'] = number
        await state.set_data(state_data)
    else:
        number = state_data['number']

    try:
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
        code = str(int(msg))
    except:
        await message.answer('–°—É–¥–∞ –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –∫–æ–¥\n'
                             '–ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–∏—Ñ—Ä–∞–º–∏')
        return
    if state_data.get("driver") == None:
        partner_bot = Partner()
        await partner_bot.auth(number)
        await message.answer('–û–∂–∏–¥–∞–π—Ç–µ –∫–æ–¥')
        state_data['driver'] = partner_bot.driver
        await state.set_data(state_data)


@dp.callback_query_handler(state=States.RUN_BOT)
async def run_bot_callback_query_handler(call: types.CallbackQuery):
    id = str(call.message.chat.id)
    msg = call.data
    # bot_name, bot_type = msg.split(' ')
    bot_name = msg
    await States.ADMIN.set()
    await call.message.edit_text(msg + " –æ—Ç–∫—Ä—ã—Ç")
    await Admin.open_bot(bot_name=bot_name)


@dp.message_handler(state=States.RUN_BOT)
async def run_bot_message_handler(message: types.Message):
    id = str(message.chat.id)
    msg = message.text
    bot_name = msg
    await States.ADMIN.set()
    await message.answer(msg + " –æ—Ç–∫—Ä—ã—Ç")
    await Admin.open_bot(bot_name=bot_name)


@dp.callback_query_handler(state=States.CHECK_WAITS)
async def check_waits_callback_query_handler(call: types.CallbackQuery):
    id = str(call.message.chat.id)
    msg = call.data
    await States.ADMIN.set()
    await call.message.edit_text(msg + " –æ—Ç–∫—Ä—ã—Ç")
    await Admin.check_delivery(msg, call.message)

@dp.callback_query_handler(state=States.CHECK_BOTS_BALANCE)
async def check_waits_callback_query_handler(call: types.CallbackQuery):
    id = str(call.message.chat.id)
    msg = call.data

    await States.ADMIN.set()
    if msg == "yes":
        all_bots = Bots_Model.load(_type="WB")
        print([bot.name for bot in all_bots])
        print(len([bot.name for bot in all_bots]))
        random.shuffle(all_bots)
        start_date = datetime.now()
        minutes = 0
        for bot in all_bots:
            minutes += random.randint(1,4)
            BotEvent_Model(bot_name=bot.name, event="CHECK_BALANCE", wait=True, datetime_to_run=start_date + timedelta(minutes=minutes, seconds=random.randint(0, 59))).insert()

        await call.message.edit_text(msg)

@dp.callback_query_handler(state=States.COLLECT_OTHER_ORDERS)
async def collect_other_deliveries_callback_query_handler(call: types.CallbackQuery):
    id = str(call.message.chat.id)
    ie = call.data
    inn = Users_Model.load(ie=ie).inn
    await States.MAIN.set()

    await call.message.edit_text(f'–ù–∞—á–∞–ª–∞—Å—å —Å–±–æ—Ä–∫–∞ –†–ï–ê–õ–¨–ù–´–• –∑–∞–∫–∞–∑–æ–≤ –ø–æ {ie}')

    await Partner().collect_other_deliveries(inn)

    await call.message.answer(f'–ó–∞–∫–æ–Ω—á–∏–ª–∞—Å—å —Å–±–æ—Ä–∫–∞ –†–ï–ê–õ–¨–ù–´–• –∑–∞–∫–∞–∑–æ–≤ –ø–æ {ie}')


@dp.callback_query_handler(state=States.COLLECT_ORDERS)
async def collect_deliveries_callback_query_handler(call: types.CallbackQuery):
    id = str(call.message.chat.id)
    ie = call.data
    inn = Users_Model.load(ie=ie).inn
    await States.MAIN.set()

    await call.message.edit_text(f'–ù–∞—á–∞–ª–∞—Å—å —Å–±–æ—Ä–∫–∞ —Å–∞–º–æ–≤—ã–∫—É–ø–æ–≤ –ø–æ {ie}')
    if id != "794329884":
        await tg_bot.send_message("794329884", f'–ù–∞—á–∞–ª–∞—Å—å —Å–±–æ—Ä–∫–∞ —Å–∞–º–æ–≤—ã–∫—É–ø–æ–≤ –ø–æ {ie}')

    res = await Partner().collect_deliveries(inn)
    res_msg = ''
    for r in res:
        res_msg += r + "\n\n"
    if ('–ù–µ –Ω–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑' not in res_msg) and ('–°–∞–º–æ–≤—ã–∫—É–ø–æ–≤ –ø–æ –¥–∞–Ω–Ω–æ–º—É –ò–ü –Ω–µ—Ç' not in res_msg) \
            and ('–°–ª–µ—Ç–µ–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –∞–∫–∫–∞—É–Ω—Ç –ü–∞—Ä—Ç–Ω—ë—Ä–æ–≤' not in res_msg):
        res_msg = '‚úÖ –í—Å–µ –∑–∞–∫–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ ‚úÖ' + '\n\n'

    await call.message.answer(res_msg + f'–ó–∞–∫–æ–Ω—á–∏–ª–∞—Å—å —Å–±–æ—Ä–∫–∞ —Å–∞–º–æ–≤—ã–∫—É–ø–æ–≤ –ø–æ {ie}')
    if id != "794329884":
        await tg_bot.send_message("794329884", res_msg + f'–ó–∞–∫–æ–Ω—á–∏–ª–∞—Å—å —Å–±–æ—Ä–∫–∞ —Å–∞–º–æ–≤—ã–∫—É–ø–æ–≤ –ø–æ {ie}')


@dp.callback_query_handler(state=States.EXCEPTED_ORDERS_LIST)
async def excepted_deliveries_callback_query_handler(call: types.CallbackQuery, state: FSMContext):
    id = str(call.message.chat.id)
    ie = call.data
    inn = Users_Model.load(ie=ie).inn
    excepted_deliveries = ExceptedDeliveries_Model.load(inn=inn)
    await state.update_data(inn=inn)

    if excepted_deliveries:

        res_msg = f"–î–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {ie} –∏—Å–∫–ª—é—á–µ–Ω—ã –∑–∞–∫–∞–∑—ã —Å –Ω–æ–º–µ—Ä–∞–º–∏:"
        for ed in excepted_deliveries:
            res_msg += "\n" + ed.delivery_number
        res_msg += f"\n\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–æ–≤,–∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å"
    else:
        res_msg = f"–£ –∫–ª–∏–µ–Ω—Ç–∞ {ie} –Ω–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"
        res_msg += f"\n\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∏—Å–∫–ª—é—á–∏—Ç—å"
    await States.EXCEPTED_ORDERS_LIST_CHANGE.set()
    await call.message.edit_text(res_msg)


@dp.message_handler(state=States.EXCEPTED_ORDERS_LIST_CHANGE)
async def excepted_deliveries_change_handler(message: types.Message, state: FSMContext):
    msg = message.text
    id = str(message.chat.id)
    delivery_numbers = msg.replace("\n", " ").strip().split(" ")

    data = await state.get_data()
    inn = data['inn']
    excepted_deliveries = ExceptedDeliveries_Model.load(inn=inn)

    if excepted_deliveries:
        local_delivery_numbers = [ed.delivery_number for ed in excepted_deliveries]

    added = []
    deleted = []
    for delivery_number in delivery_numbers:
        try:
            i = local_delivery_numbers.index(delivery_number)
            print(i)
            excepted_deliveries[i].delete()
            deleted += [delivery_number]
        except:
            eo = ExceptedDelivery_Model(inn=inn, delivery_number=delivery_number, start_datetime=datetime.now())
            eo.insert()
            added += [delivery_number]

    res_msg = ""
    if len(added):
        res_msg = f"–î–æ–±–∞–≤–ª–µ–Ω—ã –∑–∞–∫–∞–∑—ã:"
        for delivery_number in added:
            res_msg += "\n" + delivery_number

        if len(deleted):
            res_msg += "\n"
    if len(deleted):
        res_msg += "\n" + "–£–¥–∞–ª–µ–Ω—ã –∑–∞–∫–∞–∑—ã:"
        for delivery_number in deleted:
            res_msg += "\n" + delivery_number

    ie = Users_Model.load(inn=inn).ie
    excepted_deliveries = ExceptedDeliveries_Model.load(inn=inn)

    if excepted_deliveries:
        res_msg += "\n\n" + f"–î–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {ie} –∏—Å–∫–ª—é—á–µ–Ω—ã –∑–∞–∫–∞–∑—ã —Å –Ω–æ–º–µ—Ä–∞–º–∏:"
        for eo in excepted_deliveries:
            res_msg += "\n" + eo.delivery_number
    else:
        res_msg += "\n\n" + f"–î–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {ie} –Ω–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"

    await States.MAIN.set()
    markup = get_markup('main_main', Users_Model.load(id).role)
    await message.answer(res_msg, reply_markup=markup)


@dp.message_handler(state=States.TO_WL)
async def to_whitelist_handler(message: types.Message):
    msg = message.text
    id = str(message.chat.id)
    if msg.lower() in '–ø–æ username':
        await message.answer("–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    elif msg.lower() in '—Å–≥–µ–Ω–µ–Ω—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á':
        secret_key = Admin.generate_secret_key()

        Whitelist_Model(secret_key=secret_key).insert()

        await States.ADMIN.set()
        markup = get_markup('admin_main', id=id)
        await message.answer("–ö–ª—é—á –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
        await message.answer(secret_key, reply_markup=markup)
    elif "@" in msg:
        username = msg[1:]
        Whitelist_Model(username=username).insert()

        await States.ADMIN.set()
        markup = get_markup('admin_main', id=id)
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å username {msg} –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=markup)


@dp.message_handler(state=States.BOT_BUY, content_types=['text'])
async def bot_buy_handler(message: types.Message):
    id = str(message.chat.id)
    msg = message.text
    if msg.lower() == "üí∞ –≤—ã–∫—É–ø —Å–æ–±—Ä–∞–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ üí∞":
        bots_cnt = 1
    else:
        try:
            bots_cnt = int(msg)
        except:
            await message.answer('–í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ —Ü–∏—Ñ—Ä—É, —É–∫–∞–∂–∏—Ç–µ —Ü–∏—Ñ—Ä—É')
            return

    await States.ADMIN.set()

    await message.answer('–í—ã–∫—É–ø –Ω–∞—á–∞–ª—Å—è')

    await Admin.bot_buy(message, bots_cnt)


@dp.message_handler(state=States.RE_BUY)
async def re_bot_buy_handler(message: types.Message, state: FSMContext):
    id = str(message.chat.id)
    msg = message.text

    # –ü–µ—Ä–≤—ã–º –±—ã–ª –≤–≤–µ–¥—ë–Ω –∞—Ä—Ç–∏–∫—É–ª, –≤—Å—ë –ø–æ—Å–ª–µ–¥—É—é—â–µ–µ - —ç—Ç–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
    article = msg.split(' ')[0]
    search_key = msg[len(article) + 1:]

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–æ —É–∫–∞–∑–∞–Ω–æ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —à–∞–≥–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
    data = await state.get_data()
    bot_name = data['bot_name']

    logger.info(f"{bot_name} {article} {search_key}")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥ –¥–ª—è –ê–¥–∏–º–∏–Ω–∞,
    # —á—Ç–æ–±—ã –≤—Å—ë –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ—Å–ª–µ, —Å–Ω–æ–≤–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –∞–¥–º–∏–Ω–∞
    await States.ADMIN.set()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    bot_event = BotsEvents_Model.load(bot_name=bot_name, wait=True)
    logger.info(bot_event)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —Ç–æ–ª—å–∫–æ –≤—ã–∫—É–ø
    is_go_search = True
    is_go_buy = True
    if bot_event:
        bot_event = bot_event[0]
        if bot_event.event == "RE_FOUND":
            is_go_search = False
            is_go_buy = True
        try:
            int(article)
        except:
            is_go_search = False
            is_go_buy = False

    logger.info(f"is_go_search = {is_go_search}\nis_go_buy = {is_go_buy}")

    # –ü–æ–∏—Å–∫
    if is_go_search:
        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ
        goods = [[article, search_key, '', "1", "1", "381108544328"]]
        await message.answer(f'–ù–∞—á–∞–ª—Å—è –ø–æ–∏—Å–∫ –∞—Ä—Ç–∏–∫—É–ª–∞ {article}')

        # —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö
        data_for_bots, status_fail = await Admin.get_data_of_goods(goods)
        if status_fail:
            await message.answer(f'‚ùå –ü–æ–∏—Å–∫ –∞—Ä—Ç–∏–∫—É–ª–∞ {article} —É–ø–∞–ª –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –∫–∞—Ä—Ç–æ—á–∫–∏ ‚ùå')
        else:
            msgs = ''
            res_msg = ''
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞
            if DEBUG:
                msgs = await Admin.bot_re_search(bot_name, data_for_bots)
            else:
                try:
                    msgs = await Admin.bot_re_search(bot_name, data_for_bots)
                except:
                    await message.answer(f'‚ùå –ü–æ–∏—Å–∫ –∞—Ä—Ç–∏–∫—É–ª–∞ {article} —É–ø–∞–ª ‚ùå')
            try:
                for msg in msgs:
                    res_msg += msg + "\n"
            except:
                pass

            res_msg += '\n' + f'–ü–æ–∏—Å–∫ –∞—Ä—Ç–∏–∫—É–ª–∞ {article} –∑–∞–≤–µ—Ä—à–µ–Ω'

            await message.answer(res_msg)

    # –í—ã–∫—É–ø
    if is_go_buy:
        await message.answer('–í—ã–∫—É–ø –Ω–∞—á–∞–ª—Å—è')

        # –ï—Å–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è, –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –ø–æ –±–æ—Ç—É
        if not bot_event:
            bot_event = BotsEvents_Model.load(bot_name=bot_name, wait=True)

        if bot_event:
            bot_event = bot_event[0]

            # –∑–∞–ø—É—Å–∫–∞–µ–º –≤—ã–∫—É–ø
            await Admin.bot_re_buy(message, bot_event)

            res_msg = f"–ó–∞–≤–µ—Ä—à–µ–Ω –≤—ã–∫—É–ø –ø–æ –±–æ—Ç—É: {bot_name}"

            await message.answer(res_msg)
        await message.answer("ERROR")


@dp.callback_query_handler(state=States.RE_BUY)
async def excepted_deliveries_callback_query_handler(call: types.CallbackQuery, state: FSMContext):
    id = str(call.message.chat.id)
    msg = call.data
    logger.info(msg)

    bot_name, balance, _ = msg.split(" ")
    await state.set_data({'bot_name': bot_name})

    await call.message.answer('–£–∫–∞–∂–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∏ –∫–ª—é—á–µ–≤—É—é —Ñ—Ä–∞–∑—É –¥–ª—è –±–æ—Ç–∞')


@dp.message_handler(state=States.ADMIN_ADDRESS_DISTRIBUTION)
async def address_distribution_handler(message: types.Message):
    msg = message.text
    id = str(message.chat.id)

    bots_data_str = msg.split('\n\n')

    for bot_data in bots_data_str:
        bot_data = bot_data.split('\n')

        name = bot_data[0]
        new_addresses = bot_data[1:]

        wb_bot = Bots_Model.load(name=name)
        wb_bot.append(addresses=new_addresses)
        wb_bot.update()

        for address in new_addresses:
            address = Addresses_Model.load(address=address)
            address.set(added_to_bot=True)
            address.update()

    await States.ADMIN.set()
    markup = get_markup('admin_main', id=id)
    await message.answer('–í—Å–µ –∞–¥—Ä–µ—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–æ—Ç–æ–≤', reply_markup=markup)


@dp.message_handler(state=States.FF_ADDRESS_START)
async def ff_address_start_handler(message: types.Message):
    id = str(message.chat.id)
    msg = message.text

    user = Users_Model.load(id)

    name = msg
    user.set(name=name)
    user.update()

    await States.FF_ADDRESS_END.set()
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –§–§')


@dp.message_handler(state=States.FF_ADDRESS_END)
async def ff_address_end_handler(message: types.Message):
    id = str(message.chat.id)
    msg = message.text

    user = Users_Model.load(id)

    address = msg
    user.append(addresses=[address])
    user.update()

    await States.MAIN.set()

    is_admin = Admin.is_admin(id)
    if is_admin:
        markup = get_markup('main_main', is_admin=is_admin)
    else:
        markup = get_markup('main_main', Users_Model.load(id).role)
    await message.answer('–ú—ã –∑–∞–ø–æ–º–Ω–∏–ª–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ', reply_markup=markup)


@dp.message_handler(state=States.ADMIN_ADDRESS_VERIFICATION)
async def address_verification_handler(message: types.Message):
    msg = message.text
    id = str(message.chat.id)

    new_addresses = msg.split('\n')

    all_not_checked_addresses = Addresses_Model.get_all_not_checked()

    for i, old_address_str in enumerate(all_not_checked_addresses):
        address = Address_Model().load(address=old_address_str)
        address.append(address=new_addresses[i])
        address.update()

        user = Users_Model.load(id=address.tg_id)
        for j, address in user.addresses:
            if address == old_address_str:
                user.addresses[j] = new_addresses[i]
                user.set(addresses=user.addresses)
                address.update()
                break

    await States.ADMIN.set()
    markup = get_markup('admin_main', Admin.is_admin(id), id)
    await message.answer('–í—Å–µ –∞–¥—Ä–µ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', reply_markup=markup)


@dp.message_handler(state=States.PUP_ADDRESSES_START)
async def pup_addresses_start_handler(message: types.Message):
    id = str(message.chat.id)
    msg = message.text

    user = Users_Model.load(id)

    name = msg
    user.set(name=name)
    user.update()

    await States.PUP_ADDRESSES_CONTINUE.set()
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å–∞ –≤–∞—à–∏—Ö –ü–í–ó\n\n'
                         '–ö–∞–∂–¥—ã–π –∞–¥—Ä–µ—Å —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ—á–∫–∏ –∏–ª–∏ –∫–∞–∂–¥—ã–π –∞–¥—Ä–µ—Å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏\n\n'
                         '–ü—Ä–∏–º–µ—Ä:\n'
                         '–≥ –ú–æ—Å–∫–≤–∞, –ß–∏—Å—Ç–æ–ø—Ä—É–¥–Ω–∞—è —É–ª–∏—Ü–∞ 32–∫2\n'
                         '–≥ –ú–æ—Å–∫–≤–∞, –í–∞–≤–∏–ª–æ–≤—Å–∫–∞—è —É–ª–∏—Ü–∞ 22–∫8')


@dp.message_handler(state=States.CREATE_ORDER)
async def create_order_handler(message: types.Message, state: FSMContext):
    id = str(message.chat.id)
    msg = message.text

    data = await state.get_data()

    if 'order_name' not in data.keys():
        order_name = msg

        await state.set_data({"order_name": order_name})

        await message.answer('–í–≤–µ–¥–∏—Ç–µ –ò–ò–ù –∫–ª–∏–µ–Ω—Ç–∞')
        return
    elif 'inn' not in data.keys():
        try:
            inn = str(int(msg))

            data['inn'] = inn

            await state.set_data(data)

            await message.answer('–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª—ã')
        except:
            await message.answer('–ò–ù–ù –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä')
        return
    elif 'articles' not in data.keys():
        articles = msg.replace("\n", " ").strip().split(" ")

        try:
            # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä—Ç–∏–∫—É–ª—ã
            [int(article) for article in articles]

            data["articles"] = articles
            await state.set_data(data)

            await message.answer('–°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤—ã–∫—É–ø–æ–≤ –∫–∞–∂–¥–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞')
        except:
            await message.answer('–ê—Ä—Ç–∏–∫—É–ª—ã –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä')
        return
    elif 'quantities_to_bought' not in data.keys():
        quantities_to_bought = msg.replace("\n", " ").strip().split(" ")

        logger.info(quantities_to_bought)

        try:
            if len(quantities_to_bought) == 1:
                quantities_to_bought = [int(quantities_to_bought[0]) for _ in range(len(data['articles']))]
            else:
                quantities_to_bought = [int(quantity_to_bought) for quantity_to_bought in quantities_to_bought]

            data["quantities_to_bought"] = quantities_to_bought
            await state.set_data(data)

            await message.answer(f'–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞\n\n'
                                 f'{data["articles"][0]}', parse_mode="HTML")
        except:
            await message.answer('–ö–æ–ª-–≤–æ –≤—ã–∫—É–ø–æ–≤ –∫–∞–∂–¥–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–∏—Ñ—Ä–∞–º–∏')
        return
    elif 'search_keys' not in data.keys():
        search_keys = msg

        data['search_keys'] = [search_keys]
        await state.set_data(data)
        if len(data['articles']) > 1:
            await message.answer(f'–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞\n\n'
                                 f'{data["articles"][1]}', parse_mode="HTML")
        else:
            await message.answer('–°–∫–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –∫–∞–∂–¥—ã–π –∞—Ä—Ç–∏–∫—É–ª')
        return
    elif len(data['search_keys']) < len(data['articles']):
        search_keys = msg

        data['search_keys'] += [search_keys]
        await state.set_data(data)
        logger.info(f"{len(data['search_keys'])} {len(data['articles'])}")
        if len(data['search_keys']) == len(data['articles']):
            await message.answer('–°–∫–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –∫–∞–∂–¥—ã–π –∞—Ä—Ç–∏–∫—É–ª')
        else:
            await message.answer(f'–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞\n\n'
                                 f'{data["articles"][len(data["search_keys"])]}', parse_mode="HTML")
        return
    elif 'numbers_of_comments' not in data.keys():
        numbers_of_comments = msg.replace("\n", " ").strip().split(" ")

        try:
            if len(numbers_of_comments) == 1:
                numbers_of_comments = [int(numbers_of_comments[0]) for _ in range(len(data['articles']))]
            else:
                numbers_of_comments = [int(number_of_comments) for number_of_comments in numbers_of_comments]

            data['numbers_of_comments'] = numbers_of_comments
            await state.set_data(data)

            await message.answer(f'<i>–ö–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ—á–∫–∏</i>\n\n'
                                 f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞\n\n'
                                 f'{data["articles"][0]} <b>{data["search_keys"][0]}</b>', parse_mode="HTML")
        except:
            await message.answer('–ö–æ–ª-–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–∏—Ñ—Ä–∞–º–∏')
        return
    elif 'comments' not in data.keys():
        comments = msg.strip().split("\n")

        data['comments'] = [comments]
        await state.set_data(data)

        if len(data['articles']) > 1:
            await message.answer(f'<i>–ö–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ—á–∫–∏</i>\n\n'
                                 f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞\n\n'
                                 f'{data["articles"][1]} <b>{data["search_keys"][1]}</b>', parse_mode="HTML")
        else:
            await message.answer(f'–°–∫–æ–ª—å–∫–æ –¥–µ–ª–∞—Ç—å –≤—ã–∫—É–ø–æ–≤ –≤ –¥–µ–Ω—å?')
        return
    elif len(data['comments']) < len(data['articles']):
        comments = msg.strip().split("\n")

        data['comments'] += [comments]
        await state.set_data(data)

        if len(data['comments']) == len(data['articles']):
            await message.answer(f'–°–∫–æ–ª—å–∫–æ –¥–µ–ª–∞—Ç—å –≤—ã–∫—É–ø–æ–≤ –≤ –¥–µ–Ω—å?')
        else:
            await message.answer(f'<i>–ö–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ—á–∫–∏</i>\n\n'
                                 f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–∞\n\n'
                                 f'{data["articles"][len(data["comments"])]} <b>{data["search_keys"][len(data["comments"])]}</b>',
                                 parse_mode="HTML")
        return
    elif 'bought_per_day' not in data.keys():
        try:
            bought_per_day = int(msg)

            data['bought_per_day'] = bought_per_day
            await state.set_data(data)

            await message.answer(f'–ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç?')
        except:
            await message.answer(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∫—É–ø–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–∏—Ñ—Ä–æ–π')
        return
    elif 'budget' not in data.keys():
        try:
            budget = int(msg)

            data['budget'] = budget
            await state.set_data(data)
        except:
            await message.answer(f'–ë—é–¥–∂–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–∏—Ñ—Ä–æ–π')

    data['id'] = data['order_name']
    del data['order_name']
    data['remaining_budget'] = data['budget']
    data['start_datetime'] = datetime.now()
    try:
        await States.ADMIN.set()
        order = OrderOfOrders_Model(**data)
        order.insert()
        await message.answer('–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω')
    except:
        await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑')

    if order:
        BotEvents.BuildOrderFulfillmentProcess(order)

    await state.set_data({})


@dp.callback_query_handler(state=States.WATCH_ORDER)
async def watch_orders_callback_query_handler(call: types.CallbackQuery, state: FSMContext):
    id = str(call.message.chat.id)
    msg = call.data

    await States.ADMIN.set()
    if msg == '–ê–∫—Ç–∏–≤–Ω—ã–µ':
        orders = OrdersOfOrders_Model.load()
        for order in orders:
            res_msg = f"–ó–∞–∫–∞–∑ {order.id}\n" \
                      f"–û—Ç: {order.start_datetime}\n\n" \
                      f"–ò–ù–ù: {order.inn}\n" \
                      f"–ë—é–¥–∂–µ—Ç: {order.budget}\n" \
                      f"–û—Å—Ç–∞–≤—à–∏–π—Å—è –±—é–¥–∂–µ—Ç: {order.remaining_budget}\n" \
                      f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–∫—É–ø–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å: {order.bought_per_day}\n\n"
            for i, article in enumerate(order.articles):
                res_msg += f"–ê—Ä—Ç–∏–∫—É–ª {article}\n" \
                           f"–ö–æ–ª-–≤–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –≤—ã–∫—É–ø–æ–≤: {order.quantities_to_bought[i]}\n" \
                           f"–ö–æ–ª-–≤–æ —É–∂–µ –≤—ã–∫—É–ø–æ–ª–µ–Ω—ã—Ö: {order.quantities_bought[i]}\n" \
                           f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {order.search_keys[i]}\n" \
                           f"–û—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {len(order.left_comments[i]) if order.left_comments else 0}\n" \
                           f"–û—Å—Ç–∞–ª–æ—Å—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {len(order.unused_comments[i])}\n\n"

            await call.message.answer(res_msg)
    elif msg == '–ü–æ –ò–ù–ù':
        orders = OrdersOfOrders_Model.load()


@dp.message_handler(state=States.PUP_ADDRESSES_CONTINUE)
async def pup_addresses_continue_handler(message: types.Message):
    id = str(message.chat.id)
    msg = message.text

    user = Users_Model.load(id)

    if msg.lower() == '–≤—Å—ë':
        await States.MAIN.set()

        is_admin = Admin.is_admin(id)
        if is_admin:
            markup = get_markup('main_main', is_admin=is_admin)
        else:
            markup = get_markup('main_main', Users_Model.load(id).role)
        await message.answer('–ú—ã –∑–∞–ø–æ–º–Ω–∏–ª–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ', reply_markup=markup)
    else:
        new_addresses = [a for a in msg.splitlines() if a]

        user.append(addresses=new_addresses)

        for address in new_addresses:
            Address_Model(address=address, tg_id=id).insert()

        addresses_to_print = "".join(map(lambda x: x + '\n', [address for address in user.addresses]))

        markup = get_markup('pup_addresses')
        await message.answer(
            f'–≠—Ç–æ –≤—Å–µ –∞–¥—Ä–µ—Å–∞?\n\n{addresses_to_print}\n–ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –∞–¥—Ä–µ—Å–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –∏—Ö?\n\n–ï—Å–ª–∏ —ç—Ç–æ –≤—Å–µ –∞–¥—Ä–µ—Å–∞, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ "–í—Å—ë"',
            reply_markup=markup)

        user.update()


@dp.message_handler()
async def default_handler(message: types.Message):
    username = message.chat.username
    id = str(message.chat.id)
    logger.info(f"{username} {id} in default")
    whitelisted = Whitelist_Model.check(id)
    if whitelisted:
        is_admin = Admin.is_admin(id)
        if is_admin:
            await States.ADMIN.set()
            await admin_handler(message)
        else:
            await States.MAIN.set()
            await main_handler(message)


@dp.callback_query_handler(text_contains='_bw_', state="*")
async def others_callback_query_handler(call: types.CallbackQuery):
    id = str(call.message.chat.id)
    msg = call.data
    bot_name = msg.split(" ")[1]

    bot_event = BotsEvents_Model.load(event="PAYMENT", bot_name=bot_name, wait=True)

    logger.info(msg)

    if bot_event:
        bot_event = bot_event[0]
        await call.message.edit_text('–ù–∞—á–∞–ª—Å—è –≤—ã–∫—É–ø')

        try:
            status = await bot_buy(call.message, bot_event)
        except:
            status = False

        if not status:
            keyboard = get_keyboard('admin_notify_for_buy', bot_event.bot_name)
            await call.message.edit_text("–ú–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—ã–∫—É–ø –ø–æ–≤—Ç–æ—Ä–Ω–æ", reply_markup=keyboard)
        elif type(status) is str:
            msg = status
            logger.info(msg)
            await call.message.answer(msg)

        await call.message.answer("–í—ã–∫—É–ø –∑–∞–≤–µ—Ä—à–µ–Ω")


if __name__ == '__main__':
    dp.loop.create_task(BotEvents(tg_bot).main())
    executor.start_polling(dp)
