# Python Modules
from asyncio import sleep
from datetime import datetime
import io
from random import random

import asyncio
import ujson
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State

# For telegram api
from aiogram import Bot, Dispatcher, executor, types

from TG.Admin import Admin
from TG.Models.BotsWaits import BotsWait
from TG.Models.Addresses import Addresses, Address
from TG.Models.ExceptedOrders import ExceptedOrders, ExceptedOrder
from TG.Models.Orders import Orders
from TG.Models.Users import Users, User
from TG.Models.Bots import Bots as Bots_model
from TG.Models.Whitelist import Whitelist
from TG.Models.Admins import Admin as Admin_model
from TG.Markups import get_markup, get_keyboard, get_list_keyboard
from WB.Partner import Partner

from configs import config

import pandas as pd

DEBUG = True

ADMIN_BTNS = ['üè° —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å–∞ –ø–æ –±–æ—Ç–∞–º üè°', 'üîç –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ üîé', '‚ûï –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚ûï', '‚óÑ –Ω–∞–∑–∞–¥']

API_TOKEN = config['tokens']['telegram']
# Initialize bot and dispatcher
tg_bot = Bot(token=API_TOKEN)
dp = Dispatcher(tg_bot, storage=MemoryStorage())


# States
class States(StatesGroup):
    ADMIN = State()
    MAIN = State()
    WL_SECRET_KEY = State()
    INSIDE = State()
    ADMIN_ADDRESS_DISTRIBUTION = State()
    FF_ADDRESS_START = State()
    FF_ADDRESS_END = State()
    PUP_ADDRESSES_START = State()
    PUP_ADDRESSES_CONTINUE = State()
    ADMIN_ADDRESS_VERIFICATION = State()
    ORDER = State()
    TO_WL = State()
    REGISTER = State()
    RUN_BOT = State()
    CHECK_WAITS = State()
    BOT_SEARCH = State()
    BOT_BUY = State()
    COLLECT_OTHER_ORDERS = State()
    EXCEPTED_ORDERS_LIST = State()
    EXCEPTED_ORDERS_LIST_CHANGE = State()
    COLLECT_ORDERS = State()
    AUTH_PARTNER = State()
    RE_BUY = State()


@dp.message_handler(text='‚óÑ –ù–∞–∑–∞–¥', state="*")
async def back_handler(message: types.Message, state: FSMContext):
    id = str(message.chat.id)
    is_admin = Admin.is_admin(id)
    if is_admin:
        current_state = await state.get_state()
        if current_state == "States:ADMIN" or current_state is None:
            markup = get_markup('main_main', is_admin=is_admin)
        else:
            await States.ADMIN.set()
            markup = get_markup('admin_main', id=id)
            await message.answer('–í—ã –≤ –º–µ–Ω—é –ê–¥–º–∏–Ω–∞', reply_markup=markup)
            return
    else:
        markup = get_markup('main_main', Users.load(id).role)
    await States.MAIN.set()
    await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup)

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    username = message.chat.username
    id = str(message.chat.id)
    print(username, id, 'is started')
    whitelisted = Whitelist.check(id)
    if whitelisted:
        await States.MAIN.set()
        is_admin = Admin.is_admin(id)
        if is_admin:
            markup = get_markup('main_main', is_admin=is_admin)
        else:
            user = Users.load(id)
            if user:
                markup = get_markup('main_main', user.role)
            else:
                markup = get_markup('main_main')
        await message.reply("–ü—Ä–∏–≤–µ—Ç", reply_markup=markup)
    elif username:
        wl = Whitelist.set_tg_id(id, username=username)
        if wl:
            await States.MAIN.set()
            markup = get_markup('main_main')
            await message.reply("–ü—Ä–∏–≤–µ—Ç", reply_markup=markup)
    else:
        await States.WL_SECRET_KEY.set()


@dp.message_handler(state=States.WL_SECRET_KEY)
async def whitelist_secret_key_handler(message: types.Message):
    secret_key = message.text
    id = str(message.chat.id)
    wl = Whitelist.set_tg_id(id, secret_key=secret_key)
    if wl:
        await States.MAIN.set()
        markup = get_markup('main_main')
        await message.answer("–ü—Ä–∏–≤–µ—Ç", reply_markup=markup)


@dp.message_handler(lambda message: message.text == 'Admin')
async def set_admin(message: types.Message):
    id = str(message.chat.id)
    is_admin = Admin.is_admin(id)
    if is_admin:
        await States.ADMIN.set()
        markup = get_markup('admin_main', is_admin=is_admin, id=id)
        await message.answer(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –õ–æ—Ä–¥ {message.chat.full_name}', reply_markup=markup)


@dp.message_handler(state=States.MAIN)
async def main_handler(message: types.Message):
    msg = message.text.lower()
    id = str(message.chat.id)
    user = Users.load(id)

    print(user)

    if not user:
        if "‚ö° —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚ö°" in msg:
            await States.REGISTER.set()
            markup = get_markup('main_register')
            await message.answer("–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å:", reply_markup=markup)
            return
    elif user.role in "FF":
        if "üöÄ —Å–æ–±—Ä–∞—Ç—å —Å–∞–º–æ–≤—ã–∫—É–ø—ã üöÄ" in msg:
            # orders = Orders.load(collected=False)
            # for order in orders:
            #     await message.answer(f'–ê—Ä—Ç–∏–∫—É–ª—ã –∑–∞–∫–∞–∑–∞ {order.articles}\n\n'
            #                          f'–ê–¥—Ä–µ—Å –∑–∞–∫–∞–∑–∞ {order.pup_address}\n\n'
            #                          f'–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞ {order.start_date}')
            # await message.answer('‚õî üöÄ –°–±–æ—Ä–∫–∞ —Å–∞–º–æ–≤—ã–∫—É–ø–æ–≤ –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ üöÄ ‚õî')
            users = Users.load(role='IE')
            ies = [user.ie for user in users]
            print(ies)
            await States.COLLECT_ORDERS.set()
            markup = get_list_keyboard(ies)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ò–ü, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ —Å–æ–±—Ä–∞—Ç—å —Å–∞–º–æ–≤—ã–∫—É–ø—ã', reply_markup=markup)
            return
        elif "‚õî —Å–æ–±—Ä–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—ã üöö" in msg:
            await message.answer('‚õî –°–±–æ—Ä–∫–∞ –†–ï–ê–õ–¨–ù–´–• –∑–∞–∫–∞–∑–æ–≤ –ü–û–ö–ê –ù–ï–î–û–°–¢–£–ü–ù–ê ‚õî')
            # users = Users.load(role='IE')
            # ies = [user.ie for user in users]
            # print(ies)
            # await States.COLLECT_OTHER_ORDERS.set()
            # markup = get_list_keyboard(ies)
            # await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ò–ü, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ —Å–æ–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑—ã', reply_markup=markup)
            return
        elif "üìë —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∏–∑ —Å–±–æ—Ä–∫–∏ –∑–∞–∫–∞–∑–æ–≤ üìë" in msg:
            users = Users.load(role='IE')
            if users:
                ies = [user.ie for user in users]
                print(ies)
                await States.EXCEPTED_ORDERS_LIST.set()
                markup = get_list_keyboard(ies)
                await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ò–ü, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫', reply_markup=markup)
                return
            else:
                await message.answer('–ù–∏ –æ–¥–Ω–æ –ò–ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
                return
    elif user.role in "PUP":
        if "üìä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä" in msg:
            # orders = Orders.load_stat(pup_tg_id="791436094")
            orders = Orders.load_stat(pup_tg_id=id)
            if orders:
                msg = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü:</b> üìÖ\n\n"

                total_price_str = str(sum([order.total_price for order in orders]))
                total_price = ''.join([p + ' ' if (len(total_price_str) - i) % 3 == 1 else p for i, p in enumerate(total_price_str)])
                msg += f"<b>–û–±–æ—Ä–æ—Ç:</b> {total_price}‚ÇΩ\n" \
                       f"<b>–ó–∞–∫–∞–∑—ã:</b> {sum([sum(order.quantities) for order in orders])} üì¶\n"

                addresses_list = list(set(order.pup_address for order in orders))
                cities_list = list(set(order.pup_address.split(",")[0] for order in orders))

                stat = []
                for i, address in enumerate(addresses_list):
                    stat += [{}]
                    stat[i]['cnt'] = 0
                    stat[i]['total_price'] = 0
                    stat[i]['fbo_cnt'] = 0

                    for order in orders:
                        if order.pup_address == address:
                            stat[i]['address'] = address
                            stat[i]['total_price'] += order.total_price
                            stat[i]['cnt'] += 1
                            print(order.statuses)
                            if "FBO" in order.statuses:
                                stat[i]['fbo_cnt'] += sum(1 if status == "FBO" else 0 for status in order.statuses)

                stat = sorted(stat, key=lambda o: o['total_price'], reverse=True)

                # msg += "\nüì´ <b>–ù–∞ –∫–∞–∂–¥—ã–π –∞–¥—Ä–µ—Å</b> üì´\n"
                for city in cities_list:
                    msg += f"\nüè¨ <u><b>{city.title()}:</b></u>\n"
                    for s in stat:
                        if city in s['address']:
                            total_price_str = str(s['total_price'])
                            total_price = ''.join([p+' ' if (len(total_price_str)-i) % 3 == 1 else p for i, p in enumerate(total_price_str)])

                            msg += f"\nüì´ <b>{','.join(s['address'].split(',')[1:]).title()}:</b>\n" \
                                   f"<b>–û–±–æ—Ä–æ—Ç:</b> {total_price}‚ÇΩ\n" \
                                   f"<b>–ó–∞–∫–∞–∑—ã:</b> {s['cnt']} üì¶\n"
            else:
                msg = "<b>–ù–∞ –≤–∞—à–∏ –ü–í–ó –µ—â–µ –Ω–µ –±—ã–ª–æ –∑–∞–∫–∞–∑–æ–≤ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ</b>"

            await message.answer(msg, parse_mode="HTML")
            return
        elif "üìì –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–≤–∑ üìì" in msg:
            # orders = Orders.load_check_state(pup_tg_id="791436094")
            orders = Orders.load_check_state(pup_tg_id=id)
            if orders:
                msg = "üìì <b>–°–æ—Å—Ç–æ—è–Ω–∏—è –ü–í–ó</b> üìì\n\n"

                addresses_list = list(set(order.pup_address for order in orders))
                cities_list = list(set(order.pup_address.split(",")[0] for order in orders))

                is_fbos_cnt = 0

                stat = []
                for i, address in enumerate(addresses_list):
                    stat += [{}]
                    stat[i]['cnt'] = 0
                    stat[i]['fbo_cnt'] = 0
                    stat[i]['articles'] = []
                    for order in orders:
                        if order.pup_address == address:
                            stat[i]['address'] = address
                            stat[i]['cnt'] += 1
                            print("FBO" in order.statuses, order.statuses)
                            if "FBO" in order.statuses:
                                is_fbos_cnt += 1
                                is_fbos = [1 if status == "FBO" else 0 for status in order.statuses]
                                stat[i]['fbo_cnt'] += sum(is_fbos)
                                for j, is_fbo in enumerate(is_fbos):
                                    if is_fbo:
                                        in_articles = [order.articles[j] in article for article in stat[i]['articles']]
                                        if any(in_articles):
                                            index = in_articles.index(True)
                                            splited = stat[i]['articles'][index].split(' ')
                                            stat[i]['articles'][index] = splited[0] + " " + str(int(splited[1])+1)
                                        else:
                                            stat[i]['articles'] += [order.articles[j] + " 1"]
                if is_fbos_cnt:
                    stat = sorted(stat, key=lambda o: o['fbo_cnt'], reverse=True)

                    # msg += "\nüì´ <b>–¢–æ–≤–∞—Ä—ã —Ñ–∏–∑–∏—á–µ—Å–∫–∏ –Ω–∞ –ü–í–ó</b> üì´\n"
                    for city in cities_list:
                        _msg = f"\nüè¨ <u><b>{city.title()}:</b></u>\n"

                        is_have_fbo_cnt = False
                        for s in stat:
                            if city in s['address']:
                                if s['fbo_cnt']:
                                    is_have_fbo_cnt = True
                                    _msg += f"\nüì´ <b>{','.join(s['address'].split(',')[1:]).title()}:</b>\n" \
                                            f"<b>–¢–æ–≤–∞—Ä—ã —Ñ–∏–∑–∏—á–µ—Å–∫–∏ –Ω–∞ –ü–í–ó:</b> {s['fbo_cnt']} üì¶\n"
                                    _msg += f"<b>–ê—Ä—Ç–∏–∫—É–ª     –∫–æ–ª-–≤–æ</b>\n"
                                    for article in s['articles']:
                                        _msg += f"{'   '.join(article.split(' '))} —à—Ç.\n"
                        if is_have_fbo_cnt:
                            msg += _msg
                else:
                    msg = "<b>–î–ª—è –≤–∞—à–∏—Ö –ü–í–ó –µ—â–µ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏</b>"
            else:
                msg = "<b>–î–ª—è –≤–∞—à–∏—Ö –ü–í–ó –µ—â–µ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏</b>"

            await message.answer(msg, parse_mode="HTML")
            return
    is_admin = Admin.is_admin(id)
    if is_admin:
        if "üåà admin" in msg:
            await set_admin(message)
            return


@dp.message_handler(state=States.REGISTER)
async def register_handler(message: types.Message):
    msg = message.text.lower()
    id = str(message.chat.id)

    if "–∫–∞–∫ –ø–≤–∑" in msg:
        id = str(message.chat.id)
        user = Users.load(id)
        if not user:
            user = User(id, role='PUP')
            user.insert()

        await States.PUP_ADDRESSES_START.set()
    elif "–∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Ñ—Ñ" in msg:
        id = str(message.chat.id)
        user = Users.load(id)
        if not user:
            user = User(id, role='FF')
            user.insert()

        await States.FF_ADDRESS_START.set()
    elif "–Ω–∞–∑–∞–¥" in msg:
        await States.MAIN.set()
        markup = get_markup('main_main')
        await message.reply("–ü—Ä–∏–≤–µ—Ç", reply_markup=markup)

    await message.answer("–í–∞—à–µ –§–ò–û?")


@dp.message_handler(state=States.ADMIN)
async def admin_handler(message: types.Message):
    print(message)
    id = str(message.chat.id)
    msg = message.text.lower()
    print(msg)
    if 'üè° —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å–∞ –ø–æ –±–æ—Ç–∞–º üè°' in msg:
        res_message, state = Admin.check_not_added_pup_addresses()
        markup = get_markup('admin_main', id=id)
        await message.answer(res_message, reply_markup=markup)
        await getattr(States, state).set()
    elif '‚úâ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–¥—Ä–µ—Å–∞ ‚úâ' in msg:
        res_message, state = Admin.check_not_checked_pup_addresses()
        markup = get_markup('admin_main', id=id)
        await message.answer(res_message, reply_markup=markup)
        await getattr(States, state).set()
    elif "üîç –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ üîé" in msg:
        keyboard = get_keyboard('admin_bot_search')
        await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ Excel —Ñ–∞–π–ª –∑–∞–∫–∞–∑–∞\n'
                             '–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∏ –≤—ã–∫—É–ø–∏—Ç—å—Å—è 1 —Ç–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –∞—Ä—Ç–∏–∫—É–ª–æ–º', reply_markup=keyboard)
        await States.BOT_SEARCH.set()
    elif "üí∞ –≤—ã–∫—É–ø —Å–æ–±—Ä–∞–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ üí∞" in msg:
        bots_wait = BotsWait.load(event="FOUND")
        if bots_wait:
            await message.answer(f'{len(bots_wait)} –±–æ—Ç–æ–≤ –æ–∂–∏–¥–∞—é—Ç –≤—ã–∫—É–ø–∞, —Å–∫–æ–ª—å–∫–∏—Ö –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–∫—É–ø–∏—Ç—å?')
            await message.answer(
                '<b>–§–ò–ß–ê</b>: <i>–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É</i> <b>"üí∞ –≤—ã–∫—É–ø —Å–æ–±—Ä–∞–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ üí∞"</b> <i>–¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤—ã–∫—É–ø–∏—Ç—å</i> <b>—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω</b>.',
                parse_mode="HTML")
            await States.BOT_BUY.set()
        else:
            markup = get_markup('admin_main', id=id)
            await message.answer('----------üéâ–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!üéâ--------\n'
                                 'üí≤–í—ã –≤—ã–∫—É–ø–∏–ª–∏ –≤—Å–µ –∑–∞–∫–∞–∑—ã!üí≤', reply_markup=markup)
    elif "üí∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∫—É–ø üí∏" in msg:
        await States.RE_BUY.set()
        tg_bots = Bots_model.load_with_balance()
        bots_name = [f"{tg_bots[i].name} {tg_bots[i].balance} ‚ÇΩ" for i in range(len(tg_bots))]
        markup = get_keyboard('admin_bots', bots_name)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞', reply_markup=markup)
    elif "‚ûï –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚ûï" in msg:
        await States.TO_WL.set()
        markup = get_markup('admin_add_user')
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±', reply_markup=markup)
    elif "üíº –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –ø–∞—Ä—Ç–Ω—ë—Ä–∫—É üíº" in msg:
        await States.AUTH_PARTNER.set()
        markup = get_markup('only_back')
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 9XXXXXXX\n'
                             '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–∏–¥—ë—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏', reply_markup=markup)
    elif "üïô –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–∂–∏–¥–∞–µ–º–æ–µ üïë" in msg:

        orders = Orders.load(active=True, pred_end_date=datetime.now())
        if orders:
            await States.CHECK_WAITS.set()
            bots_name = []
            for order in orders:
                if order.bot_name not in bots_name:
                    bots_name += [order.bot_name]
            keyboard = get_keyboard('admin_bots', bots_name)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞', reply_markup=keyboard)
        else:
            await States.ADMIN.set()
            await message.answer('–í—Å–µ —Ç–æ–≤–∞—Ä—ã –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã')
        return
    else:
        if "ü§ñ –æ—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞ ü§ñ" in msg or "ü§ñ —Å—Ç–∞—Ç—É—Å –±–æ—Ç–æ–≤ ü§ñ" in msg:
            if id == '794329884' or id == '535533975':
                if "ü§ñ –æ—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞ ü§ñ" in msg:
                    await States.RUN_BOT.set()
                    tg_bots = Bots_model.load()
                    bots_name = [f"{tg_bots[i].name} {tg_bots[i].type}" for i in range(len(tg_bots))]
                    markup = get_keyboard('admin_bots', bots_name)
                    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞', reply_markup=markup)
                if "ü§ñ —Å—Ç–∞—Ç—É—Å –±–æ—Ç–æ–≤ ü§ñ":
                    pass
        else:
            await main_handler(message)


@dp.callback_query_handler(state=States.BOT_SEARCH)
async def bot_search_callback_query_handler(call: types.CallbackQuery):
    id = str(call.message.chat.id)
    msg = call.data
    article = msg
    category = ''
    search_key = ''
    inn = ''
    if article in ['90852969']:
        # category = '–ñ–µ–Ω—â–∏–Ω–∞–º;–ü–ª—è–∂–Ω–∞—è –º–æ–¥–∞;–ö—É–ø–∞–ª—å–Ω–∏–∫–∏'
        search_key = '–ö—É–ø–∞–ª—å–Ω–∏–∫ —Å–ª–∏—Ç–Ω—ã–π –∂–µ–Ω—Å–∫–∏–π –±–µ–ª—ã–π'
        inn = '381108544328'
    if article in ['90086484']:
        # category = '–ñ–µ–Ω—â–∏–Ω–∞–º;–ü–ª—è–∂–Ω–∞—è –º–æ–¥–∞;–ö—É–ø–∞–ª—å–Ω–∏–∫–∏'
        search_key = '–ö—É–ø–∞–ª—å–Ω–∏–∫ —Ä–∞–∑–¥–µ–ª—å–Ω—ã–π'
        inn = '381108544328'
    if article in ['90633439']:
        # category = '–ñ–µ–Ω—â–∏–Ω–∞–º;–ü–ª—è–∂–Ω–∞—è –º–æ–¥–∞;–ö—É–ø–∞–ª—å–Ω–∏–∫–∏'
        search_key = '–ñ–µ–Ω—Å–∫–∏–π —Ä–∞–∑–¥–µ–ª—å–Ω—ã–π –∫—É–ø–∞–ª—å–Ω–∏–∫ –±–µ–∑ –ø—É—à –∞–ø'
        inn = '381108544328'
    if article in ['94577084']:
        # category = '–ñ–µ–Ω—â–∏–Ω–∞–º;–ü–ª—è–∂–Ω–∞—è –º–æ–¥–∞;–ö—É–ø–∞–ª—å–Ω–∏–∫–∏'
        search_key = '–®–∫–æ–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å'
        # inn = '381108544328'

    await States.ADMIN.set()

    orders = [[article, search_key, category, "1", "1", inn]]
    await call.message.edit_text(f'–ù–∞—á–∞–ª—Å—è –ø–æ–∏—Å–∫ –∞—Ä—Ç–∏–∫—É–ª–∞ {article}')

    res_msg = ''
    if DEBUG:
        run_bot = asyncio.to_thread(Admin.pre_run, orders)
        data_for_bots = await asyncio.gather(run_bot)
        data_for_bots = data_for_bots[0]
    else:
        try:
            run_bot = asyncio.to_thread(Admin.pre_run, orders)
            data_for_bots = await asyncio.gather(run_bot)
            data_for_bots = data_for_bots[0]
        except:
            await call.message.answer(f'‚ùå –ü–æ–∏—Å–∫ –∞—Ä—Ç–∏–∫—É–ª–∞ {article} —É–ø–∞–ª –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –∫–∞—Ä—Ç–æ—á–∫–∏ ‚ùå')

    if DEBUG:
        msgs = await Admin.bot_search(data_for_bots)
    else:
        try:
            msgs = await Admin.bot_search(data_for_bots)
        except:
            await call.message.answer(f'‚ùå –ü–æ–∏—Å–∫ –∞—Ä—Ç–∏–∫—É–ª–∞ {article} —É–ø–∞–ª ‚ùå')
    try:
        for msg in msgs:
            res_msg += msg + "\n"
    except:
        pass

    res_msg += '\n' + f'–ü–æ–∏—Å–∫ –∞—Ä—Ç–∏–∫—É–ª–∞ {article} –∑–∞–≤–µ—Ä—à–µ–Ω'

    await call.message.answer(res_msg)


@dp.message_handler(state=States.BOT_SEARCH, content_types=['document'])
async def bot_search_handler(message: types.Message):
    await States.ADMIN.set()

    document = io.BytesIO()
    await message.document.download(destination_file=document)
    df = pd.read_excel(document)
    orders = [row.tolist() for i, row in df.iterrows()]
    data_for_bots = Admin.pre_run(orders)
    await message.answer('–ü–æ–∏—Å–∫ –Ω–∞—á–∞–ª—Å—è')
    if DEBUG:
        msgs = await Admin.bot_search(data_for_bots)
    else:
        try:
            msgs = await Admin.bot_search(data_for_bots)
        except:
            await message.answer('‚ùå –ü–æ–∏—Å–∫ —É–ø–∞–ª ‚ùå')

    for msg in msgs:
        await message.answer(msg)

    await message.answer('–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω')


@dp.message_handler(state=States.BOT_SEARCH, content_types=['text'])
async def inside_handler(message: types.Message):
    msg = message.text.lower()
    id = str(message.chat.id)
    if msg in ADMIN_BTNS:
        await States.ADMIN.set()
        await admin_handler(message)
        return

@dp.message_handler(state=States.AUTH_PARTNER, content_types=['text'])
async def inside_handler(message: types.Message, state: FSMContext):
    msg = message.text
    id = str(message.chat.id)
    state_data = await state.get_data()
    print(state_data)
    print('number: ', state_data.get('number'))
    if state_data.get('number') == None:
        number = str(int(msg))
        state_data['number'] = number
        await state.set_data(state_data)
    else:
        number = state_data['number']

    try:
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
        code = str(int(msg))
    except:
        await message.answer('–°—É–¥–∞ –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –∫–æ–¥\n'
                             '–ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–∏—Ñ—Ä–∞–º–∏')
        return
    if state_data.get("driver") == None:
        bot = Partner()
        await bot.auth(number)
        await message.answer('–û–∂–∏–¥–∞–π—Ç–µ –∫–æ–¥')
        state_data['driver'] = bot.driver
        await state.set_data(state_data)






@dp.callback_query_handler(state=States.RUN_BOT)
async def run_bot_callback_query_handler(call: types.CallbackQuery):
    id = str(call.message.chat.id)
    msg = call.data
    bot_name, bot_type = msg.split(' ')
    await States.ADMIN.set()
    await call.message.edit_text(msg + " –æ—Ç–∫—Ä—ã—Ç")
    await Admin.open_bot(bot_name=bot_name)

@dp.message_handler(state=States.RUN_BOT)
async def run_bot_callback_query_handler(message: types.Message):
    id = str(message.chat.id)
    msg = message.text
    bot_name = msg
    await States.ADMIN.set()
    await message.answer(msg + " –æ—Ç–∫—Ä—ã—Ç")
    await Admin.open_bot(bot_name=bot_name)

@dp.message_handler(state=States.RUN_BOT)
async def run_bot_handler(message: types.Message):
    id = str(message.chat.id)
    msg = message.text
    if msg.lower() in ADMIN_BTNS:
        await States.ADMIN.set()
        await admin_handler(message)


@dp.callback_query_handler(state=States.CHECK_WAITS)
async def check_waits_callback_query_handler(call: types.CallbackQuery):
    id = str(call.message.chat.id)
    msg = call.data
    await States.ADMIN.set()
    await call.message.edit_text(msg + " –æ—Ç–∫—Ä—ã—Ç")
    await Admin.check_order(msg, call.message)


@dp.message_handler(state=States.CHECK_WAITS)
async def check_waits_handler(message: types.Message):
    id = str(message.chat.id)
    msg = message.text
    if msg.lower() in ADMIN_BTNS:
        await States.ADMIN.set()
        await admin_handler(message)


@dp.callback_query_handler(state=States.COLLECT_OTHER_ORDERS)
async def collect_other_orders_callback_query_handler(call: types.CallbackQuery):
    id = str(call.message.chat.id)
    ie = call.data
    inn = Users.load(ie=ie).inn
    await States.MAIN.set()

    await call.message.edit_text(f'–ù–∞—á–∞–ª–∞—Å—å —Å–±–æ—Ä–∫–∞ –†–ï–ê–õ–¨–ù–´–• –∑–∞–∫–∞–∑–æ–≤ –ø–æ {ie}')

    await Partner().collect_other_orders(inn)

    await call.message.answer(f'–ó–∞–∫–æ–Ω—á–∏–ª–∞—Å—å —Å–±–æ—Ä–∫–∞ –†–ï–ê–õ–¨–ù–´–• –∑–∞–∫–∞–∑–æ–≤ –ø–æ {ie}')

@dp.callback_query_handler(state=States.COLLECT_ORDERS)
async def collect_orders_callback_query_handler(call: types.CallbackQuery):
    id = str(call.message.chat.id)
    ie = call.data
    inn = Users.load(ie=ie).inn
    await States.MAIN.set()

    await call.message.edit_text(f'–ù–∞—á–∞–ª–∞—Å—å —Å–±–æ—Ä–∫–∞ —Å–∞–º–æ–≤—ã–∫—É–ø–æ–≤ –ø–æ {ie}')
    if id != "794329884":
        await tg_bot.send_message("794329884", f'–ù–∞—á–∞–ª–∞—Å—å —Å–±–æ—Ä–∫–∞ —Å–∞–º–æ–≤—ã–∫—É–ø–æ–≤ –ø–æ {ie}')

    res = await Partner().collect_orders(inn)
    res_msg = ''
    for r in res:
        res_msg += r + "\n\n"
    if ('–ù–µ –Ω–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑' not in res_msg) and ('–°–∞–º–æ–≤—ã–∫—É–ø–æ–≤ –ø–æ –¥–∞–Ω–Ω–æ–º—É –ò–ü –Ω–µ—Ç' not in res_msg)\
            and ('–°–ª–µ—Ç–µ–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –∞–∫–∫–∞—É–Ω—Ç –ü–∞—Ä—Ç–Ω—ë—Ä–æ–≤' not in res_msg):
        res_msg = '‚úÖ –í—Å–µ –∑–∞–∫–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ ‚úÖ' + '\n\n'

    await call.message.answer(res_msg + f'–ó–∞–∫–æ–Ω—á–∏–ª–∞—Å—å —Å–±–æ—Ä–∫–∞ —Å–∞–º–æ–≤—ã–∫—É–ø–æ–≤ –ø–æ {ie}')
    if id != "794329884":
        await tg_bot.send_message("794329884", res_msg + f'–ó–∞–∫–æ–Ω—á–∏–ª–∞—Å—å —Å–±–æ—Ä–∫–∞ —Å–∞–º–æ–≤—ã–∫—É–ø–æ–≤ –ø–æ {ie}')


@dp.callback_query_handler(state=States.EXCEPTED_ORDERS_LIST)
async def excepted_orders_callback_query_handler(call: types.CallbackQuery, state: FSMContext):
    id = str(call.message.chat.id)
    ie = call.data
    inn = Users.load(ie=ie).inn
    excepted_orders = ExceptedOrders.load(inn=inn)
    await state.update_data(inn=inn)

    if excepted_orders:

        res_msg = f"–î–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {ie} –∏—Å–∫–ª—é—á–µ–Ω—ã –∑–∞–∫–∞–∑—ã —Å –Ω–æ–º–µ—Ä–∞–º–∏:"
        for eo in excepted_orders:
            res_msg += "\n" + eo.order_number
        res_msg += f"\n\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–æ–≤,–∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å"
    else:
        res_msg = f"–£ –∫–ª–∏–µ–Ω—Ç–∞ {ie} –Ω–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"
        res_msg += f"\n\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∏—Å–∫–ª—é—á–∏—Ç—å"
    await States.EXCEPTED_ORDERS_LIST_CHANGE.set()
    await call.message.edit_text(res_msg)



@dp.message_handler(state=States.EXCEPTED_ORDERS_LIST_CHANGE)
async def excepted_orders_change_callback_query_handler(message: types.Message, state: FSMContext):
    msg = message.text
    id = str(message.chat.id)
    order_numbers = msg.replace("\n", " ").strip().split(" ")

    data = await state.get_data()
    inn = data['inn']
    excepted_orders = ExceptedOrders.load(inn=inn)

    if excepted_orders:

        local_order_numbers = [eo.order_number for eo in excepted_orders]

    added = []
    deleted = []
    for order_number in order_numbers:
        try:
            i = local_order_numbers.index(order_number)
            print(i)
            excepted_orders[i].delete()
            deleted += [order_number]
        except:
            eo = ExceptedOrder(inn=inn, order_number=order_number, start_datetime=datetime.now())
            eo.insert()
            added += [order_number]

    res_msg = ""
    if len(added):
        res_msg = f"–î–æ–±–∞–≤–ª–µ–Ω—ã –∑–∞–∫–∞–∑—ã:"
        for order_number in added:
            res_msg += "\n" + order_number

        if len(deleted):
            res_msg += "\n"
    if len(deleted):
        res_msg += "\n" + "–£–¥–∞–ª–µ–Ω—ã –∑–∞–∫–∞–∑—ã:"
        for order_number in deleted:
            res_msg += "\n" + order_number

    ie = Users.load(inn=inn).ie
    excepted_orders = ExceptedOrders.load(inn=inn)

    if excepted_orders:
        res_msg += "\n\n" + f"–î–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {ie} –∏—Å–∫–ª—é—á–µ–Ω—ã –∑–∞–∫–∞–∑—ã —Å –Ω–æ–º–µ—Ä–∞–º–∏:"
        for eo in excepted_orders:
            res_msg += "\n" + eo.order_number
    else:
        res_msg += "\n\n" + f"–î–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {ie} –Ω–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"

    await States.MAIN.set()
    markup = get_markup('main_main', Users.load(id).role)
    await message.answer(res_msg, reply_markup=markup)


@dp.message_handler(state=States.TO_WL)
async def to_whitelist_handler(message: types.Message):
    msg = message.text
    id = str(message.chat.id)
    if msg.lower() in '–ø–æ username':
        await message.answer("–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    elif msg.lower() in '—Å–≥–µ–Ω–µ–Ω—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á':
        secret_key = Admin.generate_secret_key()

        Whitelist(secret_key=secret_key).insert()

        await States.ADMIN.set()
        markup = get_markup('admin_main', id=id)
        await message.answer("–ö–ª—é—á –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
        await message.answer(secret_key, reply_markup=markup)
    elif "@" in msg:
        username = msg[1:]
        Whitelist(username=username).insert()

        await States.ADMIN.set()
        markup = get_markup('admin_main', id=id)
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å username {msg} –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=markup)
    elif msg.lower() in ADMIN_BTNS and Admin.is_admin(id):
        await States.ADMIN.set()
        await admin_handler(message)
        return


@dp.message_handler(state=States.BOT_BUY, content_types=['text'])
async def bot_buy_handler(message: types.Message):
    id = str(message.chat.id)
    msg = message.text
    if msg.lower() == "üí∞ –≤—ã–∫—É–ø —Å–æ–±—Ä–∞–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ üí∞":
        bots_cnt = 1
    elif msg.lower() in ADMIN_BTNS:
        await States.ADMIN.set()
        await admin_handler(message)
        return
    else:
        try:
            bots_cnt = int(msg)
        except:
            await message.answer('–í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ —Ü–∏—Ñ—Ä—É, —É–∫–∞–∂–∏—Ç–µ —Ü–∏—Ñ—Ä—É')
            return

    await States.ADMIN.set()

    await message.answer('–í—ã–∫—É–ø –Ω–∞—á–∞–ª—Å—è')

    reports = await Admin.bot_buy(message, bots_cnt)

    bot_names = [report['bot_name'] for report in reports]

    res_msg = "–ó–∞–≤–µ—Ä—à–µ–Ω –≤—ã–∫—É–ø –ø–æ –±–æ—Ç–∞–º:"
    for name in bot_names:
        res_msg += f"\n{name}"

    await message.answer('–í—ã–∫—É–ø –∑–∞–≤–µ—Ä—à–µ–Ω')

@dp.message_handler(state=States.RE_BUY)
async def re_bot_buy_handler(message: types.Message, state: FSMContext):
    id = str(message.chat.id)
    msg = message.text

    # –ü–µ—Ä–≤—ã–º –±—ã–ª –≤–≤–µ–¥—ë–Ω –∞—Ä—Ç–∏–∫—É–ª, –≤—Å—ë –ø–æ—Å–ª–µ–¥—É—é—â–µ–µ - —ç—Ç–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
    article = msg.split(' ')[0]
    search_key = msg[len(article)+1:]

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–æ —É–∫–∞–∑–∞–Ω–æ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —à–∞–≥–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
    data = await state.get_data()
    bot_name = data['bot_name']

    print(bot_name, article, search_key)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥ –¥–ª—è –ê–¥–∏–º–∏–Ω–∞,
    # —á—Ç–æ–±—ã –≤—Å—ë –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –ø–æ—Å–ª–µ, —Å–Ω–æ–≤–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –∞–¥–º–∏–Ω–∞
    await States.ADMIN.set()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    bot_wait = BotsWait.load(bot_name=bot_name, wait=True)
    print(bot_wait)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —Ç–æ–ª—å–∫–æ –≤—ã–∫—É–ø
    is_go_search = True
    is_go_buy = True
    if bot_wait:
        if bot_wait.event == "RE_FOUND":
            is_go_search = False
            is_go_buy = True
        try:
            int(article)
        except:
            is_go_search = False
            is_go_buy = False

    print("is_go_search = ", is_go_search, "\nis_go_buy = ", is_go_buy)

    # –ü–æ–∏—Å–∫
    if is_go_search:
        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ
        orders = [[article, search_key, '', "1", "1", "381108544328"]]
        await message.answer(f'–ù–∞—á–∞–ª—Å—è –ø–æ–∏—Å–∫ –∞—Ä—Ç–∏–∫—É–ª–∞ {article}')

        # —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö
        res_msg = ''
        if DEBUG:
            run_bot = asyncio.to_thread(Admin.pre_run, orders)
            data_for_bots = await asyncio.gather(run_bot)
            data_for_bots = data_for_bots[0]
        else:
            try:
                run_bot = asyncio.to_thread(Admin.pre_run, orders)
                data_for_bots = await asyncio.gather(run_bot)
                data_for_bots = data_for_bots[0]
            except:
                await message.answer(f'‚ùå –ü–æ–∏—Å–∫ –∞—Ä—Ç–∏–∫—É–ª–∞ {article} —É–ø–∞–ª –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –∫–∞—Ä—Ç–æ—á–∫–∏ ‚ùå')

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞
        if DEBUG:
            msgs = await Admin.bot_re_search(bot_name, data_for_bots)
        else:
            try:
                msgs = await Admin.bot_re_search(bot_name, data_for_bots)
            except:
                await message.answer(f'‚ùå –ü–æ–∏—Å–∫ –∞—Ä—Ç–∏–∫—É–ª–∞ {article} —É–ø–∞–ª ‚ùå')
        try:
            for msg in msgs:
                res_msg += msg + "\n"
        except:
            pass

        res_msg += '\n' + f'–ü–æ–∏—Å–∫ –∞—Ä—Ç–∏–∫—É–ª–∞ {article} –∑–∞–≤–µ—Ä—à–µ–Ω'

        await message.answer(res_msg)

    # –í—ã–∫—É–ø
    if is_go_buy:
        await message.answer('–í—ã–∫—É–ø –Ω–∞—á–∞–ª—Å—è')

        # –ï—Å–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è, –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –ø–æ –±–æ—Ç—É
        if not bot_wait:
            bot_wait = BotsWait.load(bot_name=bot_name, wait=True)

        # –∑–∞–ø—É—Å–∫–∞–µ–º –≤—ã–∫—É–ø
        await Admin.bot_re_buy(message, bot_wait)

        res_msg = f"–ó–∞–≤–µ—Ä—à–µ–Ω –≤—ã–∫—É–ø –ø–æ –±–æ—Ç—É: {bot_name}"

        await message.answer(res_msg)

@dp.callback_query_handler(state=States.RE_BUY)
async def excepted_orders_callback_query_handler(call: types.CallbackQuery, state: FSMContext):
    id = str(call.message.chat.id)
    msg = call.data
    print(msg)

    bot_name, balance, _ = msg.split(" ")
    await state.set_data({'bot_name': bot_name})

    await call.message.answer('–£–∫–∞–∂–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∏ –∫–ª—é—á–µ–≤—É—é —Ñ—Ä–∞–∑—É –¥–ª—è –±–æ—Ç–∞')

@dp.message_handler(state=States.ADMIN_ADDRESS_DISTRIBUTION)
async def address_distribution_handler(message: types.Message):
    msg = message.text
    id = str(message.chat.id)
    if msg.lower() in ADMIN_BTNS:
        await States.ADMIN.set()
        await admin_handler(message)
        return

    bots_data_str = msg.split('\n\n')

    for bot_data in bots_data_str:
        bot_data = bot_data.split('\n')

        name = bot_data[0]
        new_addresses = bot_data[1:]

        wb_bot = Bots_model.load(name=name)
        wb_bot.append(addresses=new_addresses)
        wb_bot.update()

        for address in new_addresses:
            address = Addresses.load(address=address)
            address.set(added_to_bot=True)
            address.update()

    await States.ADMIN.set()
    markup = get_markup('admin_main', id=id)
    await message.answer('–í—Å–µ –∞–¥—Ä–µ—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–æ—Ç–æ–≤', reply_markup=markup)


@dp.message_handler(state=States.FF_ADDRESS_START)
async def ff_address_start_handler(message: types.Message):
    id = str(message.chat.id)
    msg = message.text

    user = Users.load(id)

    name = msg
    user.set(name=name)
    user.update()

    await States.FF_ADDRESS_END.set()
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –§–§')


@dp.message_handler(state=States.FF_ADDRESS_END)
async def ff_address_end_handler(message: types.Message):
    id = str(message.chat.id)
    msg = message.text

    user = Users.load(id)

    address = msg
    user.append(addresses=[address])
    user.update()

    await States.MAIN.set()

    is_admin = Admin.is_admin(id)
    if is_admin:
        markup = get_markup('main_main', is_admin=is_admin)
    else:
        markup = get_markup('main_main', Users.load(id).role)
    await message.answer('–ú—ã –∑–∞–ø–æ–º–Ω–∏–ª–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ', reply_markup=markup)


@dp.message_handler(state=States.ADMIN_ADDRESS_VERIFICATION)
async def address_verification_handler(message: types.Message):
    msg = message.text
    id = str(message.chat.id)

    if msg.lower() in ADMIN_BTNS:
        await States.ADMIN.set()
        await admin_handler(message)
        return

    new_addresses = msg.split('\n')

    all_not_checked_addresses = Addresses.get_all_not_checked()

    for i, address in enumerate(all_not_checked_addresses):
        user = Users.load(id=address.tg_id)
        for j, user_address in enumerate(user.addresses):
            if user_address == address.address:
                user.addresses[j] = new_addresses[i]
                user.update()
                break

        address.address = new_addresses[i]
        address.checked = True
        address.update()


    await States.ADMIN.set()
    markup = get_markup('admin_main', Admin.is_admin(id), id)
    await message.answer('–í—Å–µ –∞–¥—Ä–µ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', reply_markup=markup)


@dp.message_handler(state=States.PUP_ADDRESSES_START)
async def pup_addresses_start_handler(message: types.Message):
    id = str(message.chat.id)
    msg = message.text

    user = Users.load(id)

    name = msg
    user.set(name=name)
    user.update()

    await States.PUP_ADDRESSES_CONTINUE.set()
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å–∞ –≤–∞—à–∏—Ö –ü–í–ó\n\n'
                         '–ö–∞–∂–¥—ã–π –∞–¥—Ä–µ—Å —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ—á–∫–∏ –∏–ª–∏ –∫–∞–∂–¥—ã–π –∞–¥—Ä–µ—Å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏\n\n'
                         '–ü—Ä–∏–º–µ—Ä:\n'
                         '–≥ –ú–æ—Å–∫–≤–∞, –ß–∏—Å—Ç–æ–ø—Ä—É–¥–Ω–∞—è —É–ª–∏—Ü–∞ 32–∫2\n'
                         '–≥ –ú–æ—Å–∫–≤–∞, –í–∞–≤–∏–ª–æ–≤—Å–∫–∞—è —É–ª–∏—Ü–∞ 22–∫8')



@dp.message_handler(state=States.PUP_ADDRESSES_CONTINUE)
async def pup_addresses_continue_handler(message: types.Message):
    id = str(message.chat.id)
    msg = message.text

    user = Users.load(id)

    if msg.lower() == '–≤—Å—ë':
        await States.MAIN.set()

        is_admin = Admin.is_admin(id)
        if is_admin:
            markup = get_markup('main_main', is_admin=is_admin)
        else:
            markup = get_markup('main_main', Users.load(id).role)
        await message.answer('–ú—ã –∑–∞–ø–æ–º–Ω–∏–ª–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ', reply_markup=markup)
    else:
        new_addresses = [a for a in msg.splitlines() if a]

        user.append(addresses=new_addresses)

        for address in new_addresses:
            Address(address=address, tg_id=id).insert()

        addresses_to_print = "".join(map(lambda x: x + '\n', [address for address in user.addresses]))

        markup = get_markup('pup_addresses')
        await message.answer(
            f'–≠—Ç–æ –≤—Å–µ –∞–¥—Ä–µ—Å–∞?\n\n{addresses_to_print}\n–ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –∞–¥—Ä–µ—Å–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –∏—Ö?\n\n–ï—Å–ª–∏ —ç—Ç–æ –≤—Å–µ –∞–¥—Ä–µ—Å–∞, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ "–í—Å—ë"',
            reply_markup=markup)

    user.update()


@dp.message_handler()
async def default_handler(message: types.Message):
    username = message.chat.username
    id = str(message.chat.id)
    print(username, id, 'in default')
    whitelisted = Whitelist.check(id)
    if whitelisted:
        is_admin = Admin.is_admin(id)
        if is_admin:
            await States.ADMIN.set()
            await admin_handler(message)
        else:
            await States.MAIN.set()
            await main_handler(message)


if __name__ == '__main__':
    executor.start_polling(dp)
